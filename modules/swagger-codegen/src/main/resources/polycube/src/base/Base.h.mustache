{{>licenseInfo}}

/* Do not edit this file manually */

{{#models}}{{#model}}/*
* {{classname}}Base.h
*
*{{#description}} {{description}}{{/description}}
*/

#pragma once

#include "../serializer/{{classname}}JsonObject.h"
{{#vendorExtensions.x-has-yang-actions}}
{{#vendorExtensions.x-yang-actions}}
{{#x-yang-action-has-output}}#include "../serializer/{{x-yang-action-output-object}}JsonObject.h"{{/x-yang-action-has-output}}
{{#x-yang-action-has-input}}#include "../serializer/{{x-yang-action-input-object}}JsonObject.h"{{/x-yang-action-has-input}}
{{/vendorExtensions.x-yang-actions}}
{{/vendorExtensions.x-has-yang-actions}}

{{#vendorExtensions.x-interface-imports}}
#include "../{{{this}}}.h"
{{/vendorExtensions.x-interface-imports}}

{{#vendorExtensions.x-inherits-from}}
#include "polycube/services/cube.h"
#include "polycube/services/port.h"
#include "polycube/services/utils.h"
#include "polycube/services/fifo_map.hpp"
{{/vendorExtensions.x-inherits-from}}

#include <spdlog/spdlog.h>

using namespace {{modelNamespace}};

{{#vendorExtensions.x-parent}}
class {{{this}}};
{{/vendorExtensions.x-parent}}
{{#vendorExtensions.x-is-port-class}}
class Ports;
{{/vendorExtensions.x-is-port-class}}

class {{classname}}Base{{#vendorExtensions.x-inherits-from}}: public {{{this}}}{{/vendorExtensions.x-inherits-from}} {
 public:
  {{#vendorExtensions.x-is-root-object}}
  {{classname}}Base({{#vars}}{{#vendorExtensions.x-is-key}}const {{{datatype}}} {{{name}}}, {{/vendorExtensions.x-is-key}}{{/vars}}const {{classname}}JsonObject &conf);
  {{/vendorExtensions.x-is-root-object}}
  {{#vendorExtensions.x-is-port-class}}
  {{classname}}Base(polycube::service::Cube<Ports> &parent,
      {{#vendorExtensions.x-classname-inherited}}{{{this}}} port,
      {{/vendorExtensions.x-classname-inherited}}const {{classname}}JsonObject &conf);
  {{/vendorExtensions.x-is-port-class}}
  {{^vendorExtensions.x-is-root-object}}{{^vendorExtensions.x-is-port-class}}
  {{classname}}Base({{{vendorExtensions.x-parent}}} &parent, const {{classname}}JsonObject &conf);
  {{/vendorExtensions.x-is-port-class}}{{/vendorExtensions.x-is-root-object}}
  virtual ~{{classname}}Base();
  virtual void update(const {{classname}}JsonObject &conf);
  virtual {{classname}}JsonObject toJsonObject();
  {{#vars}}
  {{^vendorExtensions.x-is-base-datamodel}}
  {{^vendorExtensions.x-has-default-impl}}

  /// <summary>
  ///{{#description}} {{description}}{{/description}}
  /// </summary>
  {{^isNotContainer}}
  virtual std::shared_ptr<{{complexType}}> get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) = 0;
  virtual std::vector<std::shared_ptr<{{complexType}}>> get{{nameInCamelCase}}List() = 0;
  virtual void add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf) = 0;
  virtual void add{{nameInCamelCase}}List(const std::vector<{{complexType}}JsonObject> &conf);
  virtual void replace{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf);
  virtual void del{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}},{{/lastKey}}{{/vendorExtensions.x-key-list}}) = 0;
  virtual void del{{nameInCamelCase}}List();
  {{/isNotContainer}}
  {{#isNotContainer}}
  {{#isPrimitiveType}}
  virtual {{{datatype}}} {{getter}}() = 0;
  {{^vendorExtensions.x-is-key}}
  {{^isReadOnly}}
  virtual void {{setter}}(const {{{datatype}}} &value) = 0;
  {{/isReadOnly}}
  {{/vendorExtensions.x-is-key}}
  {{/isPrimitiveType}}
  {{^isPrimitiveType}}
  virtual std::shared_ptr<{{complexType}}> get{{nameInCamelCase}}() = 0;
  {{^vendorExtensions.x-is-key}}
  {{^isReadOnly}}
  virtual void add{{nameInCamelCase}}(const {{complexType}}JsonObject &value) = 0;
  virtual void replace{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf);
  virtual void del{{nameInCamelCase}}() = 0;
  {{/isReadOnly}}
  {{/vendorExtensions.x-is-key}}
  {{/isPrimitiveType}}
  {{/isNotContainer}}
  {{/vendorExtensions.x-has-default-impl}}
  {{/vendorExtensions.x-is-base-datamodel}}
  {{/vars}}
  {{#vendorExtensions.x-has-yang-actions}}
  {{#vendorExtensions.x-yang-actions}}
  virtual {{#x-yang-action-has-output}}{{x-yang-action-output-object}}JsonObject{{/x-yang-action-has-output}}{{^x-yang-action-has-output}}void{{/x-yang-action-has-output}} {{x-yang-action-name-lower-camelcase}}({{#x-yang-action-has-input}}{{x-yang-action-input-object}}JsonObject input{{/x-yang-action-has-input}}) = 0;
  {{/vendorExtensions.x-yang-actions}}
  {{/vendorExtensions.x-has-yang-actions}}
  {{#vendorExtensions.x-parent}}

  std::shared_ptr<spdlog::logger> logger();
 protected:
  {{this}} &parent_;
  {{/vendorExtensions.x-parent}}
};
{{/model}}
{{/models}}
