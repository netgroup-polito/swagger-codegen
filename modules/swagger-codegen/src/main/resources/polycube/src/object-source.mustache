{{>licenseInfo}}

// TODO: Modify these methods with your own implementation

{{#models}}{{#model}}
#include "{{classname}}.h"
{{#vendorExtensions.x-root-object}}
#include "{{vendorExtensions.x-root-object}}.h"
{{/vendorExtensions.x-root-object}}
{{#vendorExtensions.x-is-root-object}}
#include "{{classname}}_dp.h"

{{classname}}::{{classname}}({{#vars}}{{#vendorExtensions.x-is-key}}const {{{datatype}}} {{{name}}}, {{/vendorExtensions.x-is-key}}{{/vars}}const {{classname}}JsonObject &conf)
  : Cube(conf.getBase(), { {{classVarName}}_code }, {}),
    {{classname}}Base({{#vars}}{{#vendorExtensions.x-is-key}}{{{name}}}, {{/vendorExtensions.x-is-key}}{{/vars}}conf) {
{{#vars}}
{{^vendorExtensions.x-is-base-datamodel}}
{{^isNotContainer}}
  add{{nameInCamelCase}}List(conf.{{getter}}());
{{/isNotContainer}}
{{#isNotContainer}}
{{^vendorExtensions.x-is-key}}
{{^isReadOnly}}
{{^vendorExtensions.x-is-required}}
{{^vendorExtensions.x-has-default-value}}
  if (conf.{{name}}IsSet()) {
{{/vendorExtensions.x-has-default-value}}
{{/vendorExtensions.x-is-required}}
{{#isPrimitiveType}}
    {{setter}}(conf.{{getter}}());
{{/isPrimitiveType}}
{{^isPrimitiveType}}
  auto value = conf.{{getter}}();
{{#vendorExtensions.x-key-list}}
    {{type}} {{varName}}_ = value.{{getter}}();
{{/vendorExtensions.x-key-list}}
  add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}, {{/vendorExtensions.x-key-list}}conf.{{getter}}());
{{/isPrimitiveType}}
{{^vendorExtensions.x-is-required}}
{{^vendorExtensions.x-has-default-value}}
  }

{{/vendorExtensions.x-has-default-value}}
{{/vendorExtensions.x-is-required}}
{{/isReadOnly}}
{{/vendorExtensions.x-is-key}}
{{/isNotContainer}}
{{/vendorExtensions.x-is-base-datamodel}}
{{/vars}}
}
{{/vendorExtensions.x-is-root-object}}
{{#vendorExtensions.x-is-port-class}}

{{classname}}::{{classname}}(polycube::service::Cube<Ports> &parent,
    {{#vendorExtensions.x-classname-inherited}}{{{this}}} port,
    {{/vendorExtensions.x-classname-inherited}}const {{classname}}JsonObject &conf)
    : PortsBase(parent, port, conf) {}
{{/vendorExtensions.x-is-port-class}}
{{^vendorExtensions.x-is-root-object}}
{{^vendorExtensions.x-is-port-class}}

{{classname}}::{{classname}}({{{vendorExtensions.x-parent}}} &parent, const {{classname}}JsonObject &conf)
    : {{classname}}Base(parent, conf) {}
{{/vendorExtensions.x-is-port-class}}
{{/vendorExtensions.x-is-root-object}}

{{classname}}::~{{classname}}() {}
{{^vendorExtensions.x-parent}}

void {{classname}}::packet_in({{vendorExtensions.x-child-ports-classname}} &port,
    polycube::service::PacketInMetadata &md,
    const std::vector<uint8_t> &packet){
  logger()->debug("Packet received from port {0}", port.name());
}
{{/vendorExtensions.x-parent}}
{{#vars}}
{{^vendorExtensions.x-is-base-datamodel}}
{{^vendorExtensions.x-has-default-impl}}
{{^vendorExtensions.x-is-port-class}}
{{#isNotContainer}}
{{#isPrimitiveType}}

{{{datatype}}} {{classname}}::{{getter}}() {
  throw std::runtime_error("{{classname}}::{{getter}}: Method not implemented");
}
{{^vendorExtensions.x-is-key}}
{{^isReadOnly}}

void {{classname}}::{{setter}}(const {{{datatype}}} &value) {
  throw std::runtime_error("{{classname}}::{{setter}}: Method not implemented");
}
{{/isReadOnly}}
{{/vendorExtensions.x-is-key}}
{{/isPrimitiveType}}
{{/isNotContainer}}
{{^isNotContainer}}
std::shared_ptr<{{complexType}}> {{classname}}::get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) {
  throw std::runtime_error("{{classname}}::getEntry: Method not implemented");
}

std::vector<std::shared_ptr<{{complexType}}>> {{classname}}::get{{nameInCamelCase}}List() {
  throw std::runtime_error("{{classname}}::get{{nameInCamelCase}}List: Method not implemented");
}

void {{classname}}::add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf) {
  throw std::runtime_error("{{classname}}::add{{nameInCamelCase}}: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void {{classname}}::add{{nameInCamelCase}}List(const std::vector<{{complexType}}JsonObject> &conf) {
  // call default implementation in base class
  {{classname}}Base::add{{nameInCamelCase}}List(conf);
}

// Basic default implementation, place your extension here (if needed)
void {{classname}}::replace{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf) {
  // call default implementation in base class
  {{classname}}Base::replace{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}, {{/vendorExtensions.x-key-list}}conf);
}

void {{classname}}::del{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) {
  throw std::runtime_error("{{classname}}::del{{nameInCamelCase}}: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void {{classname}}::del{{nameInCamelCase}}List() {
  // call default implementation in base class
  {{classname}}Base::del{{nameInCamelCase}}List();
}
{{/isNotContainer}}
{{#isNotContainer}}
{{^isPrimitiveType}}

std::shared_ptr<{{complexType}}> {{classname}}::get{{nameInCamelCase}}() {
  throw std::runtime_error("{{classname}}::get{{nameInCamelCase}}: Method not implemented");
}
{{^vendorExtensions.x-is-key}}
{{^isReadOnly}}

void {{classname}}::add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &value) {
  throw std::runtime_error("{{classname}}::add{{nameInCamelCase}}: Method not implemented");
}

// Basic default implementation, place your extension here (if needed)
void {{classname}}::replace{{nameInCamelCase}}(const {{complexType}}JsonObject &conf) {
  // call default implementation in base class
  {{classname}}Base::replace{{nameInCamelCase}}(conf);
}

void {{classname}}::del{{nameInCamelCase}}() {
  throw std::runtime_error("{{classname}}::del{{nameInCamelCase}}: method not implemented");
}
{{/isReadOnly}}
{{/vendorExtensions.x-is-key}}
{{/isPrimitiveType}}
{{/isNotContainer}}
{{/vendorExtensions.x-is-port-class}}
{{#vendorExtensions.x-is-port-class}}

// Basic default implementation, place your extension here (if needed)
std::shared_ptr<{{complexType}}> {{classname}}::get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) {
  // call default implementation in base class
  return {{classname}}Base::get{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}});
}

// Basic default implementation, place your extension here (if needed)
std::vector<std::shared_ptr<{{complexType}}>> {{classname}}::get{{nameInCamelCase}}List() {
  // call default implementation in base class
  return {{classname}}Base::get{{nameInCamelCase}}List();
}

// Basic default implementation, place your extension here (if needed)
void {{classname}}::add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf) {
  {{classname}}Base::add{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}, {{/vendorExtensions.x-key-list}}conf);
}

// Basic default implementation, place your extension here (if needed)
void {{classname}}::add{{nameInCamelCase}}List(const std::vector<{{complexType}}JsonObject> &conf) {
  // call default implementation in base class
  {{classname}}Base::add{{nameInCamelCase}}List(conf);
}

// Basic default implementation, place your extension here (if needed)
void {{classname}}::replace{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}, {{/vendorExtensions.x-key-list}}const {{complexType}}JsonObject &conf) {
  // call default implementation in base class
  {{classname}}Base::replace{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}, {{/vendorExtensions.x-key-list}}conf);
}

// Basic default implementation, place your extension here (if needed)
void {{classname}}::del{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}const {{type}} &{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}}) {
  // call default implementation in base class
  {{classname}}Base::del{{nameInCamelCase}}({{#vendorExtensions.x-key-list}}{{varName}}{{^lastKey}}, {{/lastKey}}{{/vendorExtensions.x-key-list}});
}

// Basic default implementation, place your extension here (if needed)
void {{classname}}::del{{nameInCamelCase}}List() {
  // call default implementation in base class
  {{classname}}Base::del{{nameInCamelCase}}List();
}
{{/vendorExtensions.x-is-port-class}}
{{/vendorExtensions.x-has-default-impl}}
{{/vendorExtensions.x-is-base-datamodel}}
{{/vars}}

{{#vendorExtensions.x-has-yang-actions}}
{{#vendorExtensions.x-yang-actions}}

{{#x-yang-action-has-output}}{{x-yang-action-output-object}}JsonObject{{/x-yang-action-has-output}}{{^x-yang-action-has-output}}void{{/x-yang-action-has-output}} {{classname}}::{{x-yang-action-name-lower-camelcase}}({{#x-yang-action-has-input}}{{x-yang-action-input-object}}JsonObject input{{/x-yang-action-has-input}}) {
  throw std::runtime_error("{{classname}}::{{x-yang-action-output-object}}: Method not implemented");
}
{{/vendorExtensions.x-yang-actions}}
{{/vendorExtensions.x-has-yang-actions}}
{{/model}}{{/models}}
